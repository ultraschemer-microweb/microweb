buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

ext {
    vertxVersion = '3.5.0'
}

repositories {
    jcenter()
    mavenCentral()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: "com.github.johnrengelman.shadow"
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

dependencies {
    // This dependency is found on implementation classpath of this component and consumers.
    implementation group: 'com.google.guava', name: 'guava', version: '23.0'

    // Add VertX to the project, to serve Web REST:
    implementation group: 'io.vertx', name: 'vertx-core', version: '3.7.1'
    implementation group: 'io.vertx', name: 'vertx-web', version: '3.7.1'


    // Apache utilities:
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.11'

    // Validation and contract-programming library:
    implementation group: 'net.sf.oval', name: 'oval', version: '1.90'
    implementation group: 'org.apache.logging.log4j', name: 'log4j', version: '2.11.1'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    // Add Hibernate packages, as Hibernate homepage advised:
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.0.Final'

    // Add okHttp packages and functions
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version:'4.1.0'

    // JWT decoding utilities:
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.8.3'

    // Use JUnit test framework
    testImplementation group: 'junit', name: 'junit', version: '4.12'

    // Unit testing on REST controllers:
    testImplementation group: 'io.vertx', name: 'vertx-unit', version: '3.5.2'

    // Creating random data for testing:
    testImplementation group: 'com.github.javafaker', name: 'javafaker', version: '0.15'

    // Install Postgresql driver to project - to connect to database and test the system:
    testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.2.4'
}

def _group = 'com.ultraschemer.microweb'
def _version = '0.1'
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'microweb'
            group = _group
            version = _version
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'MicroWeb'
                description = 'Small Java REST library for Microservices based on Vert.X Web.'
                url = 'http://www.ultraschemer.com/opensource/microweb'
                licenses {
                    license {
                        name = 'The Revised BSD License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'ultraschemer'
                        name = 'Paulo Silva Filho'
                        email = 'paulosfilho@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://git@github.com:ultraschemer/microweb.git'
                    developerConnection = 'scm:git:git:git@github.com:ultraschemer/microweb.git'
                    url = 'https://github.com/ultraschemer/microweb'
                }
            }
        }
    }
    repositories {
        maven {
            // Releasing Maven files to local directory.
            // Automate to a central http server manually, and later, automatically:
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

// TODO: Sign the library files later - information: https://docs.gradle.org/current/userguide/signing_plugin.html#signing_plugin
// signing {
//     sign publishing.publications.mavenJava
// }

shadowJar {
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

wrapper {
    gradleVersion = '6.1.1'
}

// Example on how to run a verticle from Gradle:
// Define the main class for the application
// mainClassName = 'io.vertx.core.Launcher'
// def mainVerticleName = 'com.ultraschemer.microweb.App'
// run {
//     args = ['run', mainVerticleName, "--launcher-class=$mainClassName"]
// }

